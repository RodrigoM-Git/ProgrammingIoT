Task a
We created an emoji class that has three functions which are
displaying the faces; such as a happy face, sad face, and wink face
emoji. We passed the color parameter to determine the color of
the emoji. We used a while loop in the main to keep iterating
through the emojis that we instantiated in the main and used the
sleep(3) method to display each emoji for 3 seconds while in the loop.

Task b
We created a temperature class to read the JSON file and
instantiate the boundaries of the temperature such as cold_max,
comfortable_min and so forth. We also created a function called
compareTemp that compares the current temperature with the temperature levels
in the JSON file to display the color and text of the current boundary the
temperature is in. We implemented a function to get the CPU temperature and
used the humidity temperature, pressure temperature, and CPU temperature to
get an accurate reading of the current temperature, and created an object with it
in order to compare the temperature with the file data, and output the correct
color on the sense hat.

Task c
We created an electronicDie.py file that consist of the
ElectronicDie class that contains a role method. The role method
has validations checks to detect shake movements using the
accelerometer sensor from the IMU. In the documentation having
more than 1G of movement is classified as a shake, but since we found that it was
too sensitive through testing we decided to increment the
validation to 3G to reduce the sensitivity of the sensor to
imitate the shake movement of a normal die when shaking the pi.

Furthermore, we created a Player class to store the name of the
player, and keep track of the points of that player.

Lastly, we have the game.py to run the game. First we instantiate
our objects such as players and die. Then we used a while loop that
validates that both players have less than 30 points in order for
the game to proceed. The points are then incremented according to the number
the player rolled. If a player were to reach 30 points, the player would be
displayed on the sense hat, the duration of the game (taken from subtracting
startTime from endTime) would be recorded, and the winning player, the player's
points, and the time would be written to a CSV file called winner.csv.


URL of Repository for Version Control:
https://github.com/RodrigoM-Git/ProgrammingIoT.git
